{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"computation wiki page from Ming Tang \u00b6","title":"Home"},{"location":"#computation-wiki-page-from-ming-tang","text":"","title":"computation wiki page from Ming Tang"},{"location":"google-cloud/wes-gcp/","text":"How to run WES pipeline in google cloud \u00b6 how to get your google cloud credentials \u00b6 a. install the gcloud sdk: (it's on conda) conda install -c conda-forge google-cloud-sdk b. Authenticate: gcloud auth login NOTE: opens up a webbrowser, where I need to select the google acct to allow access c. set project: gcloud config set project cidc-biofx dfdf dfdf dfdf dfdf CREATE the new instance: \u00b6 a. Goto: Google Compute Engine -> click \"Create Instance\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1. give your instance type a unique name, e.g. wes-aashna-1 2. Machine type: select high-mem-64 (this has 64 cores) 3. Boot disk: click \"Change\" a. click \"Custome Images\" (next to Application Images) select latest wes image- AS OF 2019-02-04, it is wes-ver-1-1b 4. Click \"Management, security, disks, networking, sole tenancy\" 1. click Disks click \"Add new disk\" scroll down to size, and **HERE** you need to try to predict how much space you need to do your analysis e.g. 2T = 2048 5. scroll to the bottom, click \"Create\" NOW you will be brough back to the Google Compute Engine page b. click on your new instance when it is up and get the IP address c. login to your instance: 1 2 3 4 5 6 7 8 9 10 ```bash gcloud compute ssh test-instance-1 WHERE test-instance-1 is the instance name NOTE: this creates ~/.ssh/google_compute_engine and ~/.ssh/google_compute._engine.pub **NOTE: You only need to do this once--after ~/.ssh/google_compute_engine and ~/.ssh/google_compute._engine.pub is created, you can use this ssh cmd to log in instead: ssh -i [your google-cloud-engine key] [your username]@[ipaddress in 1b.] e.g. ssh -i ~/.ssh/google_compute_engine aashna@XX.YY.ZZ.AA ``` formatting and mounting the second drive- \u00b6 After logging in, the next step is to mount and format the drive that you apportioned in step 1.a.4 so that you can use it. a. finding the disk name: type 1 2 3 4 5 ```bash sudo lsblk #Then look for the drive name, e.g. /dev/sdb, that corresponds to the #space that you called for. In most cases, it's /dev/sdb ``` b. format the drive: type: 1 2 3 4 5 6 7 8 9 10 11 12 *****VERY IMPORTANT-- PLEASE READ!!!!***** you only have to format a drive IF it is newly created. IF you are using a drive that was created from before, FORMATTING will delete everything you had from before. SO only do this once in the life of a disk! IF using an old disk, skip this step! ```bash sudo /home/taing/utils/formatDisk.sh [drive part, e.g. 'sdb' from 2a] e.g. sudo /home/tain/utils/formatDisk.sh sdb ``` c. mount the drive: 1. make a mount directory: EXAMPLE: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ```bash sudo mkdir /mnt/ssd ``` 2. mount the drive: ```bash sudo /home/taing/utils/mountDrv.sh [drive part, e.g. 'sdb'] /mnt/[mount point from 2c.1--just above] ``` Example: ```bash sudo /home/taing/utils/mountDrv.sh sdb /mnt/ssd ``` #This will mount /dev/sdb to /mnt/ssd d. create a directory you can use on /mnt/ssd: 1 2 3 4 5 6 7 8 9 10 11 12 13 ```bash sudo mkdir /mnt/ssd/[username] sudo chown [username]:[username] /mnt/ssd/[username] ``` EXAMPLE: ```bash sudo mkdir /mnt/ssd/aashna sudo chown aashna:aashna /mnt/ssd/aashna ``` #NOW you can read and write files to /mnt/ssd/aashan without being sudo e. REDIRECT /tmp NOTE: sometimes the /tmp directory can get full. To ensure this doesn't happen, I usually move /tmp off of the root partition 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1. `cd /mnt/ssd` #or where your newly created disk is 2. ```bash sudo mkdir tmp sudo chmod a+w tmp sudo chmod a+r tmp ``` 3. ```bash cd / sudo mv tmp/ tmp.bak sudo ln -s /mnt/ssd/tmp ``` Steps for WES setup \u00b6 f. run sentieon license: 1. cd /home/taing/utils/ 2. nohup ./sentieonLicense.sh & how to setup a wes run: (in the directory created in 2d.) \u00b6 change into your directory from 2d: cd /mnt/ssd/[username] a. clone the wes repository: git clone https://AashnaJhaveri@bitbucket.org/plumbers/cidc_wes.git b. create a data directory: mkdir data #upload your fastqs into data c. copy out the config.yaml and metasheet.csv: cp cidc_wes/config.yaml . cp cidc_wes/metasheet.csv . #Edit the config.yaml to 1. fill the sentieon path which I believe is: somehting /home/taing/sentieon/sentieon.../bin 2. fill the samples section- #Jingxin, ask aashna about this #Edit metasheet.csv to define the Normal/Tumor pairs d. link the reference files: #The reference files include, for example, the bwa index and the genome's FASTA file. ln -s /mnt/cidc_nfs/wes/ref_files Now you are ready to run RUN wes: \u00b6 a. source activate wes #Your cmd line should be pre-pended with (wes) b. do a dry run to check for errors in config or metasheet snakemake -s cidc_wes/wes.snakefile -n #If all is green you are good to go #If there are errors, fix them c. FULL run: nohup time snakemake -s cidc_wes/wes.snakefile -j 64 > nohup.out & 1 2 3 #The 'nohup' allows you to log off #The 'time' will time the run for you #the -j 64 means to use 64. Use whatever number you want.","title":"Run WES on gcp"},{"location":"google-cloud/wes-gcp/#how-to-run-wes-pipeline-in-google-cloud","text":"","title":"How to run WES pipeline in google cloud"},{"location":"google-cloud/wes-gcp/#how-to-get-your-google-cloud-credentials","text":"a. install the gcloud sdk: (it's on conda) conda install -c conda-forge google-cloud-sdk b. Authenticate: gcloud auth login NOTE: opens up a webbrowser, where I need to select the google acct to allow access c. set project: gcloud config set project cidc-biofx dfdf dfdf dfdf dfdf","title":"how to get your google cloud credentials"},{"location":"google-cloud/wes-gcp/#create-the-new-instance","text":"a. Goto: Google Compute Engine -> click \"Create Instance\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1. give your instance type a unique name, e.g. wes-aashna-1 2. Machine type: select high-mem-64 (this has 64 cores) 3. Boot disk: click \"Change\" a. click \"Custome Images\" (next to Application Images) select latest wes image- AS OF 2019-02-04, it is wes-ver-1-1b 4. Click \"Management, security, disks, networking, sole tenancy\" 1. click Disks click \"Add new disk\" scroll down to size, and **HERE** you need to try to predict how much space you need to do your analysis e.g. 2T = 2048 5. scroll to the bottom, click \"Create\" NOW you will be brough back to the Google Compute Engine page b. click on your new instance when it is up and get the IP address c. login to your instance: 1 2 3 4 5 6 7 8 9 10 ```bash gcloud compute ssh test-instance-1 WHERE test-instance-1 is the instance name NOTE: this creates ~/.ssh/google_compute_engine and ~/.ssh/google_compute._engine.pub **NOTE: You only need to do this once--after ~/.ssh/google_compute_engine and ~/.ssh/google_compute._engine.pub is created, you can use this ssh cmd to log in instead: ssh -i [your google-cloud-engine key] [your username]@[ipaddress in 1b.] e.g. ssh -i ~/.ssh/google_compute_engine aashna@XX.YY.ZZ.AA ```","title":"CREATE the new instance:"},{"location":"google-cloud/wes-gcp/#formatting-and-mounting-the-second-drive-","text":"After logging in, the next step is to mount and format the drive that you apportioned in step 1.a.4 so that you can use it. a. finding the disk name: type 1 2 3 4 5 ```bash sudo lsblk #Then look for the drive name, e.g. /dev/sdb, that corresponds to the #space that you called for. In most cases, it's /dev/sdb ``` b. format the drive: type: 1 2 3 4 5 6 7 8 9 10 11 12 *****VERY IMPORTANT-- PLEASE READ!!!!***** you only have to format a drive IF it is newly created. IF you are using a drive that was created from before, FORMATTING will delete everything you had from before. SO only do this once in the life of a disk! IF using an old disk, skip this step! ```bash sudo /home/taing/utils/formatDisk.sh [drive part, e.g. 'sdb' from 2a] e.g. sudo /home/tain/utils/formatDisk.sh sdb ``` c. mount the drive: 1. make a mount directory: EXAMPLE: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ```bash sudo mkdir /mnt/ssd ``` 2. mount the drive: ```bash sudo /home/taing/utils/mountDrv.sh [drive part, e.g. 'sdb'] /mnt/[mount point from 2c.1--just above] ``` Example: ```bash sudo /home/taing/utils/mountDrv.sh sdb /mnt/ssd ``` #This will mount /dev/sdb to /mnt/ssd d. create a directory you can use on /mnt/ssd: 1 2 3 4 5 6 7 8 9 10 11 12 13 ```bash sudo mkdir /mnt/ssd/[username] sudo chown [username]:[username] /mnt/ssd/[username] ``` EXAMPLE: ```bash sudo mkdir /mnt/ssd/aashna sudo chown aashna:aashna /mnt/ssd/aashna ``` #NOW you can read and write files to /mnt/ssd/aashan without being sudo e. REDIRECT /tmp NOTE: sometimes the /tmp directory can get full. To ensure this doesn't happen, I usually move /tmp off of the root partition 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1. `cd /mnt/ssd` #or where your newly created disk is 2. ```bash sudo mkdir tmp sudo chmod a+w tmp sudo chmod a+r tmp ``` 3. ```bash cd / sudo mv tmp/ tmp.bak sudo ln -s /mnt/ssd/tmp ```","title":"formatting and mounting the second drive-"},{"location":"google-cloud/wes-gcp/#steps-for-wes-setup","text":"f. run sentieon license: 1. cd /home/taing/utils/ 2. nohup ./sentieonLicense.sh &","title":"Steps for WES setup"},{"location":"google-cloud/wes-gcp/#how-to-setup-a-wes-run-in-the-directory-created-in-2d","text":"change into your directory from 2d: cd /mnt/ssd/[username] a. clone the wes repository: git clone https://AashnaJhaveri@bitbucket.org/plumbers/cidc_wes.git b. create a data directory: mkdir data #upload your fastqs into data c. copy out the config.yaml and metasheet.csv: cp cidc_wes/config.yaml . cp cidc_wes/metasheet.csv . #Edit the config.yaml to 1. fill the sentieon path which I believe is: somehting /home/taing/sentieon/sentieon.../bin 2. fill the samples section- #Jingxin, ask aashna about this #Edit metasheet.csv to define the Normal/Tumor pairs d. link the reference files: #The reference files include, for example, the bwa index and the genome's FASTA file. ln -s /mnt/cidc_nfs/wes/ref_files Now you are ready to run","title":"how to setup a wes run: (in the directory created in 2d.)"},{"location":"google-cloud/wes-gcp/#run-wes","text":"a. source activate wes #Your cmd line should be pre-pended with (wes) b. do a dry run to check for errors in config or metasheet snakemake -s cidc_wes/wes.snakefile -n #If all is green you are good to go #If there are errors, fix them c. FULL run: nohup time snakemake -s cidc_wes/wes.snakefile -j 64 > nohup.out & 1 2 3 #The 'nohup' allows you to log off #The 'time' will time the run for you #the -j 64 means to use 64. Use whatever number you want.","title":"RUN wes:"},{"location":"kraken/kraken_rstudio/","text":"How to Run Rstudio server on kraken \u00b6 First, submit an interactive job to get a node: srun -t 1600 --mem = 60G -c 4 --pty bash","title":"Run Rstudio on Kraken"},{"location":"kraken/kraken_rstudio/#how-to-run-rstudio-server-on-kraken","text":"First, submit an interactive job to get a node: srun -t 1600 --mem = 60G -c 4 --pty bash","title":"How to Run Rstudio server on kraken"},{"location":"setup/setup_macos/","text":"set up my new mac pro \u00b6 old post https://divingintogeneticsandgenomics.rbind.io/post/set-up-my-new-mac-laptop/ download iterm \u00b6 configure color iTerm \u2192 Preferences \u2192 Profiles \u2192 colors -> Color Presets \u2192 Tango Dark By default, word jumps (option + \u2192 or \u2190) and word deletions (option + backspace) do not work. To enable these, go to \"iTerm \u2192 Preferences \u2192 Profiles \u2192 Keys \u2192 Load Preset... \u2192 Natural Text Editing \u2192 Boom! Head explodes\" install oh-my-zsh \u00b6 sh -c \" $( curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \" zsh syntax highlighting \u00b6 https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md Oh-my-zsh : Clone this repository in oh-my-zsh's plugins directory: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ ZSH_CUSTOM :- ~/.oh-my-zsh/custom } /plugins/zsh-syntax-highlighting Activate the plugin in ~/.zshrc: my .zshrc has a plugin git , add it after that plugins=(git zsh-syntax-highlighting) https://github.com/zsh-users/zsh-syntax-highlighting/issues/530 shell integration \u00b6 https://iterm2.com/documentation-shell-integration.html logout and then login view images inside terminal \u00b6 put imgcat to your ~/bin . and add export PATH=$PATH:~/bin to your .zshrc https://www.iterm2.com/documentation-images.html A note on login shell and interactive shell. https://codingbee.net/rhcsa/rhcsa-starting-a-login-shell-or-interactive-shell-using-the-switch-user-su-command install conda \u00b6 conda config --add channels defaults conda config --add channels bioconda conda config --add channels conda-forge install sublime, rmate \u00b6 install R and Rstudio \u00b6","title":"set up MacOS"},{"location":"setup/setup_macos/#set-up-my-new-mac-pro","text":"old post https://divingintogeneticsandgenomics.rbind.io/post/set-up-my-new-mac-laptop/","title":"set up my new mac pro"},{"location":"setup/setup_macos/#download-iterm","text":"configure color iTerm \u2192 Preferences \u2192 Profiles \u2192 colors -> Color Presets \u2192 Tango Dark By default, word jumps (option + \u2192 or \u2190) and word deletions (option + backspace) do not work. To enable these, go to \"iTerm \u2192 Preferences \u2192 Profiles \u2192 Keys \u2192 Load Preset... \u2192 Natural Text Editing \u2192 Boom! Head explodes\"","title":"download iterm"},{"location":"setup/setup_macos/#install-oh-my-zsh","text":"sh -c \" $( curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh ) \"","title":"install oh-my-zsh"},{"location":"setup/setup_macos/#zsh-syntax-highlighting","text":"https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md Oh-my-zsh : Clone this repository in oh-my-zsh's plugins directory: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ ZSH_CUSTOM :- ~/.oh-my-zsh/custom } /plugins/zsh-syntax-highlighting Activate the plugin in ~/.zshrc: my .zshrc has a plugin git , add it after that plugins=(git zsh-syntax-highlighting) https://github.com/zsh-users/zsh-syntax-highlighting/issues/530","title":"zsh syntax highlighting"},{"location":"setup/setup_macos/#shell-integration","text":"https://iterm2.com/documentation-shell-integration.html logout and then login","title":"shell integration"},{"location":"setup/setup_macos/#view-images-inside-terminal","text":"put imgcat to your ~/bin . and add export PATH=$PATH:~/bin to your .zshrc https://www.iterm2.com/documentation-images.html A note on login shell and interactive shell. https://codingbee.net/rhcsa/rhcsa-starting-a-login-shell-or-interactive-shell-using-the-switch-user-su-command","title":"view images inside terminal"},{"location":"setup/setup_macos/#install-conda","text":"conda config --add channels defaults conda config --add channels bioconda conda config --add channels conda-forge","title":"install conda"},{"location":"setup/setup_macos/#install-sublime-rmate","text":"","title":"install sublime, rmate"},{"location":"setup/setup_macos/#install-r-and-rstudio","text":"","title":"install R and Rstudio"}]}